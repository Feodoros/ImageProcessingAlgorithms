struct u_Struct            // Объявляем структуру.
{
  float angle;             // В мембере angle будет храниться угол (0..2*Pi), значения которого
                           // будем задавать в программе.
};

uniform u_Struct u_struct; // Объявляем uniform-переменную u_struct.

varying float v_t;         // Объявляем varying-переменную v_t. Эта переменная будет передаваться 
                           // во фрагментный шейдер, где мы будем читать ее интерполированное
                           // значение.

attribute float a_phase;   // Объявляем attribute-переменную a_phase. Эта переменная будет
                           // задаваться пер-вертексно, и означать фазовое смещение для синуса.

void main()                // Главная функция - точка входа в шейдер. 
{
  float c = sin(a_phase + u_struct.angle);     // Занесем в переменную 'c' вычисленный синус 
                                               // с данной фазой и углом.

  gl_Position = gl_ModelViewProjectionMatrix * // Запишем в clip-позицию вертекса
                gl_Vertex +                    // трансформированные object-позицию и добавим
                c;                             // к полученному вектору значение 'c'.
                                               // Каждая вершина будет колебаться по синусу
                                               // со своей фазой и общим углом.         

  v_t = abs(sin(u_struct.angle));              // Вычислим 0..1 значение, зависящее от угла.
                                               // Полученное число мы запишем в 
                                               // varying-переменную 'v_t'  для последующего 
                                               // использования во фрагментом шейдере.

  // Выполняем работу ffp:

  gl_FrontColor = gl_Color;                    // Пишем цвет.
  gl_TexCoord[0] = gl_MultiTexCoord0;          // Пишем текстурную координату 0-го юнита.
}
